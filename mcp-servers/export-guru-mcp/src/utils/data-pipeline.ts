/**
 * Data Pipeline Utilities
 * 
 * This module provides utilities for creating and managing data pipelines
 * between connectors, LLMs, and the frontend.
 */

import { LLM } from '../types/common';

/**
 * Standard data flow patterns supported by the pipeline
 */
export enum DataFlowPattern {
  DIRECT = 'direct',           // Direct data access without LLM processing
  LLM_ENHANCEMENT = 'llm_enhancement', // Data enhanced by LLM
  LLM_GENERATION = 'llm_generation',  // Data generated by LLM
  HYBRID = 'hybrid'            // Combination of multiple data sources and LLM
}

/**
 * Options for pipeline execution
 */
export interface PipelineOptions {
  pattern: DataFlowPattern;
  llm?: LLM;
  cacheKey?: string;
  useCache?: boolean;
  telemetry?: boolean;
}

/**
 * Pipeline step function type
 */
export type PipelineStep<T, U> = (data: T, context: any) => Promise<U>;

/**
 * Creates a data pipeline with the specified steps
 */
export function createPipeline<T, U>(
  steps: PipelineStep<any, any>[],
  options: PipelineOptions
) {
  return async (initialData: T, context: any = {}): Promise<U> => {
    // Start telemetry if enabled
    const startTime = options.telemetry ? Date.now() : 0;
    let currentData: any = initialData;
    
    try {
      // Execute each step in sequence
      for (const step of steps) {
        currentData = await step(currentData, context);
      }
      
      // Record telemetry if enabled
      if (options.telemetry) {
        const duration = Date.now() - startTime;
        console.log(`Pipeline executed in ${duration}ms with pattern ${options.pattern}`);
      }
      
      return currentData as unknown as U;
    } catch (error: unknown) {
      console.error(`Pipeline error: ${error instanceof Error ? error.message : String(error)}`);
      throw error;
    }
  };
}

/**
 * Common pipeline patterns
 */

/**
 * Creates a direct data access pipeline
 */
export function createDirectPipeline<T, U>(
  dataAccessFn: PipelineStep<T, U>,
  options: Partial<PipelineOptions> = {}
) {
  return createPipeline<T, U>(
    [dataAccessFn],
    { pattern: DataFlowPattern.DIRECT, ...options }
  );
}

/**
 * Creates an LLM enhancement pipeline
 */
export function createLLMEnhancementPipeline<T, U>(
  dataAccessFn: PipelineStep<T, any>,
  llmEnhancementFn: PipelineStep<any, U>,
  llm: LLM,
  options: Partial<PipelineOptions> = {}
) {
  return createPipeline<T, U>(
    [dataAccessFn, llmEnhancementFn],
    { pattern: DataFlowPattern.LLM_ENHANCEMENT, llm, ...options }
  );
}

/**
 * Creates an LLM generation pipeline
 */
export function createLLMGenerationPipeline<T, U>(
  contextPreparationFn: PipelineStep<T, any>,
  llmGenerationFn: PipelineStep<any, any>,
  validationFn: PipelineStep<any, U>,
  llm: LLM,
  options: Partial<PipelineOptions> = {}
) {
  return createPipeline<T, U>(
    [contextPreparationFn, llmGenerationFn, validationFn],
    { pattern: DataFlowPattern.LLM_GENERATION, llm, ...options }
  );
}

/**
 * Creates a hybrid processing pipeline
 */
export function createHybridPipeline<T, U>(
  steps: PipelineStep<any, any>[],
  llm: LLM,
  options: Partial<PipelineOptions> = {}
) {
  return createPipeline<T, U>(
    steps,
    { pattern: DataFlowPattern.HYBRID, llm, ...options }
  );
} 